# Welcome to Serverless!

service: serverless-framework
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: default
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: "*"

plugins:
  - serverless-s3-sync
  - serverless-webpack
  - serverless-add-api-key

package:
  individually: true

custom:
  tableName: player-points
  bucketName: serverless-project-upload-5-4345345-lambda
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: Upload
  apiKeys:
    - name: api-key-1-free
      value: QWERTYUIOPASDFGHJKLZXCVBNM1
      usagePlan:
        name: "free-usage-plan"
        description: "Description of first plan"
        quota:
          limit: 1000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20
    - name: api-key-2-paid
      value: QWERTYUIOPASDFGHJKLZXCVBNM2
      usagePlan:
        name: "paid-usage-plan"
        description: "Description of first plan"
        quota:
          limit: 10000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20
    - name: api-key-3-no-usage-plan
      value: QWERTYUIOPASDFGHJKLZXCVBNM3
      usagePlan:
        name: "name-of-first-usage-plan"
    - name: api-key-4-four
      value: QWERTYUIOPASDFGHJKLZXCVBNM4

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          private: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    DemoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
